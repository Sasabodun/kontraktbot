import discord
import asyncio
from discord.ext import commands, tasks
import time
import logging
import aiohttp
import sys
import random
import string
import os
from discord import app_commands
from datetime import timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO').upper()
MAX_RETRIES = int(os.getenv('MAX_RETRIES', '5'))
HEARTBEAT_TIMEOUT = float(os.getenv('HEARTBEAT_TIMEOUT', '60.0'))
GUILD_READY_TIMEOUT = float(os.getenv('GUILD_READY_TIMEOUT', '5.0'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('discord.contract_bot')

intents = discord.Intents.default()
intents.message_content = True

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
bot = commands.Bot(
    command_prefix='!', 
    intents=intents,
    heartbeat_timeout=HEARTBEAT_TIMEOUT,  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–π —Ç–∞–π–º–∞—É—Ç heartbeat
    guild_ready_timeout=GUILD_READY_TIMEOUT   # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–π —Ç–∞–π–º–∞—É—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥–∏–ª—å–¥–∏–∏
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
active_contracts = {}
user_contracts = {}  # –î–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º
completed_contracts = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤

def generate_custom_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π custom_id –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=16))

class CleanupView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)  # –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é
        self.cleanup_button = discord.ui.Button(
            label="üßπ –û—á–∏—Å—Ç–∏—Ç—å –õ–°", 
            style=discord.ButtonStyle.danger,
            custom_id=f"cleanup_btn_{generate_custom_id()}"
        )
        self.cleanup_button.callback = self.execute_cleanup
        self.add_item(self.cleanup_button)
    
    async def execute_cleanup(self, interaction):
        try:
            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
            self.cleanup_button.disabled = True
            self.cleanup_button.label = "üßπ –û—á–∏—Å—Ç–∫–∞..."
            self.cleanup_button.style = discord.ButtonStyle.secondary
            await interaction.response.edit_message(view=self)
            
            logger.info(f"–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –õ–° –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {interaction.user.id}")
            
            # –°–æ–∑–¥–∞–µ–º DM-–∫–∞–Ω–∞–ª
            try:
                user = interaction.user
                if not user.dm_channel:
                    await user.create_dm()
                dm_channel = user.dm_channel
            except discord.Forbidden:
                try:
                    await interaction.followup.send(
                        "‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.",
                        ephemeral=True
                    )
                except:
                    pass
                return
                
            # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞
            bot_user_id = interaction.client.user.id
            messages_to_delete = []
            deletion_errors = 0
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ 14 –¥–Ω–µ–π)
            async for message in dm_channel.history(limit=200):
                if message.author.id == bot_user_id:
                    messages_to_delete.append(message)
            
            # –í DM-–∫–∞–Ω–∞–ª–∞—Ö —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¢–û–õ–¨–ö–û –ø–æ –æ–¥–Ω–æ–º—É
            deleted_count = 0
            for message in messages_to_delete:
                try:
                    await message.delete()
                    deleted_count += 1
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
                    await asyncio.sleep(0.5)
                except discord.NotFound:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
                    pass
                except discord.Forbidden:
                    deletion_errors += 1
                    logger.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}")
                except discord.HTTPException as e:
                    deletion_errors += 1
                    logger.warning(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                    await asyncio.sleep(1.0)
                except Exception as e:
                    deletion_errors += 1
                    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_msg = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}"
            if deletion_errors > 0:
                result_msg += f"\n‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–æ –æ—à–∏–±–æ–∫: {deletion_errors}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.cleanup_button.label = "‚úÖ –ì–æ—Ç–æ–≤–æ"
                self.cleanup_button.style = discord.ButtonStyle.success
                await interaction.edit_original_response(view=self)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await interaction.followup.send(
                    result_msg,
                    ephemeral=True
                )
            except discord.NotFound:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–°
                try:
                    await dm_channel.send(result_msg)
                except discord.Forbidden:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        
        except Exception as e:
            logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}", exc_info=True)
            try:
                await interaction.followup.send(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ",
                    ephemeral=True
                )
            except:
                pass

class ContractView(discord.ui.View):
    def __init__(self, bot, contract_id, channel, message):
        super().__init__(timeout=600)  # 10 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 15
        self.bot = bot
        self.contract_id = contract_id
        self.channel = channel
        self.message = message
        self.start_time = time.time()
        self.reminder_5m = None
        self.reminder_2m = None
        
        # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        self.reminder_task_5m = asyncio.create_task(self.send_reminder(300, 5))  # –ß–µ—Ä–µ–∑ 5 –º–∏–Ω
        self.reminder_task_2m = asyncio.create_task(self.send_reminder(480, 2))  # –ß–µ—Ä–µ–∑ 8 –º–∏–Ω (5+3)
        
    async def send_reminder(self, delay, minutes_left):
        try:
            await asyncio.sleep(delay)
            if self.contract_id not in active_contracts:
                return
                
            reminder_texts = {
                5: "üö® **–°–†–û–ß–ù–û! –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!**\nüëâ @–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\nüî• **–ù–µ —É–ø—É—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç!**",
                2: "üî• **–ü–û–°–õ–ï–î–ù–ò–ï 2 –ú–ò–ù–£–¢–´ –ó–ê–ü–ò–°–ò!**\nüëâ @–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\nüö® **–£–°–ü–ï–ô –ü–†–ò–°–û–ï–î–ò–ù–ò–¢–¨–°–Ø –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°!**"
            }
            
            msg = await self.channel.send(reminder_texts[minutes_left])
            if minutes_left == 5:
                self.reminder_5m = msg
            else:
                self.reminder_2m = msg
                
        except asyncio.CancelledError:
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    async def delete_reminders(self):
        try:
            if self.reminder_5m:
                await self.reminder_5m.delete()
            if self.reminder_2m:
                await self.reminder_2m.delete()
        except discord.NotFound:
            pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    def cancel_tasks(self):
        if hasattr(self, 'reminder_task_5m') and not self.reminder_task_5m.done():
            self.reminder_task_5m.cancel()
        if hasattr(self, 'reminder_task_2m') and not self.reminder_task_2m.done():
            self.reminder_task_2m.cancel()

    @discord.ui.button(label="‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", style=discord.ButtonStyle.green, custom_id="join_button")
    async def join_button(self, interaction, button):
        contract = active_contracts.get(self.contract_id)
        if not contract:
            await interaction.response.send_message("‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", ephemeral=True)
            return
            
        user_id = interaction.user.id
        if user_id not in contract["participants"]:
            contract["participants"].append(user_id)
            await self.update_message(interaction)
            await interaction.response.send_message("‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç!", ephemeral=True)
        else:
            await interaction.response.send_message("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç", ephemeral=True)
    
    async def update_message(self, interaction):
        contract = active_contracts[self.contract_id]
        participants = contract["participants"]
        message = contract["message"]
        
        embed = discord.Embed(
            title="üì¢ –ö—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?",
            description="üìù –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç!\n\n"
                        f"–ê–≤—Ç–æ—Ä: <@{contract['creator']}>",
            color=0x3498db
        )
        
        if participants:
            participants_list = "\n".join([f"<@{uid}>" for uid in participants])
            embed.add_field(
                name=f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–æ—Å—å ({len(participants)}):",
                value=participants_list,
                inline=False
            )
        else:
            embed.add_field(
                name="‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏:",
                value="–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è",
                inline=False
            )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è (10 –º–∏–Ω—É—Ç)
        elapsed_time = time.time() - self.start_time
        time_left = max(0, 600 - elapsed_time)  # 600 —Å–µ–∫ = 10 –º–∏–Ω—É—Ç
        minutes_left = int(time_left // 60)
        seconds_left = int(time_left % 60)
        
        if minutes_left > 0:
            time_display = f"{minutes_left} –º–∏–Ω {seconds_left} —Å–µ–∫"
        else:
            time_display = f"{seconds_left} —Å–µ–∫"
            
        embed.set_footer(text=f"–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ {time_display}")
        
        try:
            await message.edit(embed=embed, view=self)
        except discord.HTTPException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def on_timeout(self):
        self.cancel_tasks()
        contract = active_contracts.get(self.contract_id)
        if not contract:
            return
            
        message = contract["message"]
        participants = contract["participants"]
        creator_id = contract["creator"]
        
        await self.delete_reminders()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        participants_list = "\n".join([f"<@{uid}>" for uid in participants]) if participants else "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ—Ç"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        try:
            if participants:
                final_content = (
                    f"# üöÄ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!\n"
                    f"**–ê–≤—Ç–æ—Ä:** <@{creator_id}>\n\n"
                    f"**–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:**\n"
                    f"{participants_list}"
                )
                
                embed = discord.Embed(
                    title="‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–ø—É—â–µ–Ω!",
                    description="–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é.",
                    color=0x00ff00
                )
            else:
                final_content = "‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–º–µ–Ω–µ–Ω - –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                embed = discord.Embed(
                    title="‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–º–µ–Ω–µ–Ω",
                    description="–ù–µ –Ω–∞–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    color=0xff0000
                )
            
            await message.edit(content=final_content, embed=embed, view=None)
        except discord.HTTPException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
        try:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≤ –õ–° —Å –∫–Ω–æ–ø–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
            creator = await self.bot.fetch_user(creator_id)
            cleanup_view = CleanupView()
            
            await creator.send(
                "‚è±Ô∏è **–ó–∞–ø–∏—Å—å –Ω–∞ –≤–∞—à –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n"
                f"**–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã:**\n{participants_list}\n"
                f"–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –¥–æ–±–∞–≤—å—Ç–µ –ª—é–¥–µ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!",
                view=cleanup_view
            )
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
            await asyncio.sleep(30)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            notification = await self.channel.send(
                "‚õî **–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–∫—Ä—ã—Ç–∞!**\n"
                "üëâ @–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n"
                "üî• –ö—Ç–æ –Ω–µ —É—Å–ø–µ–ª ‚Äî —Ç–æ—Ç –æ–ø–æ–∑–¥–∞–ª! üòâ"
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
            async def delete_notification():
                await asyncio.sleep(300)
                try:
                    await notification.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                    
            asyncio.create_task(delete_notification())
            
        except discord.Forbidden:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é {creator_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        # ===== –ö–û–ù–ï–¶ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====
        
        # –ü–µ—Ä–µ–Ω–æ—Å –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
        completed_contracts[self.contract_id] = {
            "message_id": message.id,
            "channel_id": message.channel.id,
            "start_time": time.time()
        }
        
        # –û—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if self.contract_id in active_contracts:
            if creator_id in user_contracts:
                del user_contracts[creator_id]
            del active_contracts[self.contract_id]

# ===== SLASH –ö–û–ú–ê–ù–î–´ (–ü–û–Ø–í–Ø–¢–°–Ø –í –ò–ù–¢–ï–†–§–ï–ô–°–ï DISCORD) =====

@bot.tree.command(name="—Å—Ç–∞—Ä—Ç", description="–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç")
@app_commands.guild_only()  # –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö
async def start_slash(interaction: discord.Interaction):
    """Slash –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –õ–°
    if isinstance(interaction.channel, discord.DMChannel):
        await interaction.response.send_message(
            "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö",
            ephemeral=True
        )
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    if interaction.user.id in user_contracts:
        await interaction.response.send_message("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç!", ephemeral=True)
        return
        
    contract_id = f"{interaction.channel.id}-{interaction.id}"
    
    # –°–æ–∑–¥–∞–µ–º view
    view = ContractView(bot, contract_id, interaction.channel, None)
    
    active_contracts[contract_id] = {
        "creator": interaction.user.id,
        "participants": [interaction.user.id],
        "message": None,
        "view": view
    }
    user_contracts[interaction.user.id] = contract_id
    
    embed = discord.Embed(
        title="üì¢ –ö—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?",
        description="üìù –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç!\n\n"
                    f"–ê–≤—Ç–æ—Ä: {interaction.user.mention}",
        color=0x3498db
    )
    
    embed.add_field(
        name=f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–æ—Å—å (1):",
        value=f"{interaction.user.mention}",
        inline=False
    )
    
    embed.set_footer(text="–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç")
    
    try:
        await interaction.response.send_message(embed=embed, view=view)
        msg = await interaction.original_response()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        active_contracts[contract_id]["message"] = msg
        view.message = msg
    except discord.HTTPException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
        await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", ephemeral=True)

@bot.tree.command(name="–æ—á–∏—Å—Ç–∏—Ç—å", description="–û—á–∏—Å—Ç–∏—Ç—å –õ–° –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞")
@app_commands.guild_only()  # –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö
async def cleanup_slash(interaction: discord.Interaction):
    """–¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö"""
    await interaction.response.send_message(
        "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –±–æ—Ç–∞!",
        ephemeral=True
    )

# ===== –û–ë–´–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ (–û–°–¢–ê–í–õ–Ø–ï–ú –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò) =====

# –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç
@bot.command(name='—Å', aliases=['c'])
async def start_contract(ctx):
    try:
        await ctx.message.delete()
    except:
        pass
    
    if ctx.author.id in user_contracts:
        msg = await ctx.send("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç!", delete_after=10)
        return
        
    contract_id = f"{ctx.channel.id}-{ctx.message.id}"
    
    # –°–æ–∑–¥–∞–µ–º view
    view = ContractView(bot, contract_id, ctx.channel, None)
    
    active_contracts[contract_id] = {
        "creator": ctx.author.id,
        "participants": [ctx.author.id],
        "message": None,
        "view": view  # –°–æ—Ö—Ä–∞–Ω—è–µ–º view –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ
    }
    user_contracts[ctx.author.id] = contract_id
    
    embed = discord.Embed(
        title="üì¢ –ö—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–¥–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?",
        description="üìù –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç!\n\n"
                    f"–ê–≤—Ç–æ—Ä: {ctx.author.mention}",
        color=0x3498db
    )
    embed.add_field(
        name=f"‚úÖ –ó–∞–ø–∏—Å–∞–ª–æ—Å—å (1):",
        value=f"{ctx.author.mention}",
        inline=False
    )
    embed.set_footer(text="–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç")
    
    try:
        msg = await ctx.send(embed=embed, view=view)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏
        active_contracts[contract_id]["message"] = msg
        view.message = msg
    except discord.HTTPException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
        await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞", delete_after=10)

# –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç
@bot.command(name='–æ', aliases=['o'])
async def cancel_contract(ctx):
    try:
        await ctx.message.delete()
    except:
        pass
    
    if ctx.author.id not in user_contracts:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤!", delete_after=10)
        return
        
    contract_id = user_contracts[ctx.author.id]
    contract = active_contracts.get(contract_id)
    
    if contract:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π view
        if "view" in contract and contract["view"]:
            view = contract["view"]
            view.cancel_tasks()
            await view.delete_reminders()
        
        try:
            if contract["message"]:
                await contract["message"].delete()
        except:
            pass
        del active_contracts[contract_id]
    
    del user_contracts[ctx.author.id]
    await ctx.send("‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞!", delete_after=10)

# –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å
@bot.command(name='–∑', aliases=['z'])
async def close_contract(ctx):
    try:
        await ctx.message.delete()
    except:
        pass
    
    if ctx.author.id not in user_contracts:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤!", delete_after=10)
        return
        
    contract_id = user_contracts[ctx.author.id]
    contract = active_contracts.get(contract_id)
    
    if not contract:
        await ctx.send("‚ùå –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", delete_after=10)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π view
    if "view" in contract and contract["view"]:
        view = contract["view"]
        view.timeout = 0
        await view.on_timeout()
    
    del user_contracts[ctx.author.id]
    await ctx.send("‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ!", delete_after=10)

# –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
@bot.command(name='–ª', aliases=['l'])
async def list_contracts(ctx):
    try:
        await ctx.message.delete()
    except:
        pass
    
    if not active_contracts:
        await ctx.send("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–µ—Ç", delete_after=15)
        return
        
    embed = discord.Embed(
        title="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã",
        color=0x3498db
    )
    
    for contract_id, contract in active_contracts.items():
        try:
            creator = await bot.fetch_user(contract["creator"])
            participants = contract["participants"]
            time_left = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if "view" in contract and contract["view"]:
                elapsed = time.time() - contract["view"].start_time
                remaining = max(0, 600 - elapsed)  # 10 –º–∏–Ω—É—Ç
                time_left = f"{int(remaining // 60)} –º–∏–Ω"
            
            embed.add_field(
                name=f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç {creator.display_name}",
                value=f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n–û—Å—Ç–∞–ª–æ—Å—å: {time_left}",
                inline=False
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ {contract_id}: {e}")
    
    await ctx.send(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –õ–° (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π)
@bot.command(name='–æ—á–∏—Å—Ç–∏—Ç—å', aliases=['clear', 'clean'])
async def cleanup_dm(ctx):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –õ–°
    if not isinstance(ctx.channel, discord.DMChannel):
        try:
            await ctx.message.delete()
        except:
            pass
        await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!", delete_after=10)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É)
    view = CleanupView()
    try:
        msg = await ctx.send(
            "üßπ **–û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            view=view
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è {ctx.author.id}: {msg.id}")
    except discord.Forbidden:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è {ctx.author.id}")

@tasks.loop(minutes=10)
async def clean_old_contracts():
    current_time = time.time()
    to_remove = []
    
    contracts_to_check = list(completed_contracts.items())
    
    for contract_id, contract in contracts_to_check:
        if current_time - contract["start_time"] > 7200:
            try:
                channel = bot.get_channel(contract["channel_id"])
                if channel is None:
                    channel = await bot.fetch_channel(contract["channel_id"])
                message = await channel.fetch_message(contract["message_id"])
                await message.delete()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {contract_id}")
            except discord.NotFound:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {contract['message_id']} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
            except discord.Forbidden:
                logger.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {contract['channel_id']}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {contract_id}: {e}")
            finally:
                to_remove.append(contract_id)
    
    for contract_id in to_remove:
        try:
            del completed_contracts[contract_id]
            logger.info(f"–£–¥–∞–ª—ë–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç {contract_id} –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
        except KeyError:
            pass

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
@bot.event
async def on_ready():
    logger.info(f"–ë–æ—Ç {bot.user.name} –≥–æ—Ç–æ–≤! (ID: {bot.user.id})")
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {len(bot.guilds)} —Å–µ—Ä–≤–µ—Ä–∞–º")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º slash –∫–æ–º–∞–Ω–¥—ã
    try:
        synced = await bot.tree.sync()
        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} slash –∫–æ–º–∞–Ω–¥")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ slash –∫–æ–º–∞–Ω–¥: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    if not clean_old_contracts.is_running():
        clean_old_contracts.start()

@bot.event
async def on_disconnect():
    logger.warning("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç Discord")

@bot.event
async def on_resumed():
    logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Discord –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
@bot.event
async def on_error(event, *args, **kwargs):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ {event}: {args}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", delete_after=10)
    elif isinstance(error, commands.BotMissingPermissions):
        await ctx.send("‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤", delete_after=10)
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã {ctx.command}: {error}", exc_info=True)
        await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", delete_after=10)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
async def shutdown():
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    for contract_id, contract in active_contracts.items():
        if "view" in contract and contract["view"]:
            contract["view"].cancel_tasks()
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    if clean_old_contracts.is_running():
        clean_old_contracts.stop()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Discord
    await bot.close()
    logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

# –ó–∞–ø—É—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async def main():
    max_retries = MAX_RETRIES
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞... (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{max_retries})")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º aiohttp.ClientTimeout –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–∞–π–º–∞—É—Ç–æ–≤
            connector = aiohttp.TCPConnector(
                limit=100,
                limit_per_host=30,
                ttl_dns_cache=300,
                use_dns_cache=True,
                keepalive_timeout=60,
                enable_cleanup_closed=True
            )
            
            timeout = aiohttp.ClientTimeout(total=30, connect=10)
            
            async with aiohttp.ClientSession(
                connector=connector,
                timeout=timeout
            ) as session:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                discord_token = os.getenv('DISCORD_TOKEN')
                if not discord_token:
                    logger.error("DISCORD_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
                    logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: DISCORD_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
                    return
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
                await bot.start(discord_token)
                
        except (OSError, aiohttp.ClientError, asyncio.TimeoutError) as e:
            retry_count += 1
            wait_time = min(2 ** retry_count, 60)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫
            
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            
            if retry_count < max_retries:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(wait_time)
            else:
                logger.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                break
                
        except discord.LoginFailure:
            logger.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
            break
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
            await shutdown()
            break
            
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            retry_count += 1
            
            if retry_count < max_retries:
                await asyncio.sleep(10)
            else:
                logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
                break

if __name__ == "__main__":
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å asyncio
        if sys.platform == 'win32':
            asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
        
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)